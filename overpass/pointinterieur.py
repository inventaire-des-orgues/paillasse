import json

FIC_COMMUNES = 'D:\\Users\\poullennecgwi\\Downloads\\OSM\\communes-20190101\\communes-20190101.json'


def point_inside_polygon(x, y, polyg):
    """
    pi = point_inside_polygon(-0.4469913, 49.06458854,[[-0.45787379999999994,49.063878499676505],[-0.45120179999999993,49.06545309967611],[-0.4490515999999999,49.06581489967605],[-0.4465841999999999,49.06511829967619],[-0.4447340999999999,49.06226299967692],[-0.4434336999999999,49.05990669967749],[-0.4433420999999999,49.05818069967792],[-0.4408370999999998,49.05698349967822],[-0.43827619999999984,49.05434349967888],[-0.43331149999999985,49.05220449967939],[-0.4315589999999999,49.049395399680094],[-0.42769279999999993,49.0485695996803],[-0.4233090999999998,49.04935709968009],[-0.42333359999999987,49.048492699680324],[-0.42038369999999986,49.04623629968087],[-0.4189124999999999,49.04407639968142],[-0.4187658999999999,49.041491399682045],[-0.42316739999999997,49.04163209968202],[-0.4226608999999999,49.040575899682274],[-0.4189809999999999,49.040362699682326],[-0.41843389999999997,49.038031799682905],[-0.4192943999999999,49.03497019968365],[-0.4209701999999999,49.03203359968438],[-0.4240864999999998,49.033158299684104],[-0.4249922999999998,49.03427409968383],[-0.4276364999999998,49.03257909968425],[-0.4292303999999999,49.03293499968415],[-0.4296871999999999,49.03054189968476],[-0.4334565999999999,49.03171699968447],[-0.4375177999999999,49.03209819968437],[-0.4437569999999999,49.03175409968446],[-0.44813159999999985,49.03103119968465],[-0.4515078999999999,49.0311816996846],[-0.4551178999999998,49.032424699684285],[-0.4581422999999998,49.03203539968438],[-0.46013319999999985,49.03254019968425],[-0.46557539999999986,49.03316259968411],[-0.4662986999999999,49.03251009968428],[-0.4666053999999999,49.03484209968368],[-0.46549669999999993,49.03759469968303],[-0.46506099999999984,49.04130789968208],[-0.4632872999999998,49.04460889968127],[-0.4605772999999999,49.047437299680595],[-0.4586226999999998,49.0488584996802],[-0.4592217999999999,49.05379739967902],[-0.46079659999999983,49.05928549967764],[-0.4604008999999999,49.06062159967731],[-0.45787379999999994,49.063878499676505]])
    print(pi)
    :param x: long
    :param y: lat
    :param polyg: liste de listes[lon, lat]
    :return: bool
    """
    n = len(polyg)
    inside = False

    p1x, p1y = polyg[0]
    for i in range(n+1):
        p2x,p2y = polyg[i % n]
        if y > min(p1y, p2y):
            if y <= max(p1y, p2y):
                if x <= max(p1x, p2x):
                    if p1y != p2y:
                        xinters = (y-p1y)*(p2x-p1x)/(p2y-p1y)+p1x
                    if p1x == p2x or x <= xinters:
                        inside = not inside
        p1x, p1y = p2x, p2y
    return inside


with open(FIC_COMMUNES, encoding='utf-8') as fjson:
    j = json.load(fjson)
    communes = j['features']

    for commune in communes:
        poly = commune['geometry']['coordinates'][0]
        if not isinstance(poly[0][0], list):
            insee = commune['properties']['insee']
            nom = commune['properties']['nom']
            if point_inside_polygon(-0.4469913, 49.06458854, poly):
                print(nom, insee)
